"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

try:
    from server.security import *
except ImportError:
    assert False, "server/ 폴더 밑에 security repository 를 git clone 해야 합니다."

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

IS_UNIT_TEST = False
IS_FULL_TEST = False
IS_CHECK_PERFORMANCE_PROBLEM = False
REQUESTS_IS_RECORD_RESULT = False
REQUESTS_USE_CACHE = False
REQUESTS_CACHE_FIRST = False

ALLOWED_HOSTS = ["*"]

# Application definition

DJANGO_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
)

LIBRARY_APPS = ("prettyjson", "storages")

FRAMEWORK_APPS = ("base", "common", "human")

SERVER_APPS = ()

INSTALLED_APPS = []
INSTALLED_APPS.extend(DJANGO_APPS)
INSTALLED_APPS.extend(LIBRARY_APPS)
INSTALLED_APPS.extend(FRAMEWORK_APPS)
INSTALLED_APPS.extend(SERVER_APPS)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "base.middleware.TransactionMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "server.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "127.0.0.1",
        "PORT": "5432",
        "NAME": "server_db",
        "USER": "server_user",
        "PASSWORD": PASSWORD,
    }
}

# Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "TIMEOUT": 0,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        },
    },
    "email_onetime_password": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "TIMEOUT": 300,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    },
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

COUNTRY_CODE = "KR"

LANGUAGE_CODE = "ko-KR"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "common/static"),)
STATIC_ROOT = os.path.join(BASE_DIR, "collected_static")

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Root URL
ROOT_URL = "http://localhost:8000"

# AWS S3

# 아래 두 상수는 S3 연동을 사용하면 안되는 경우 아예 선언 자체가 안되어야 함
# 따라서 아래 두 상수는 각 환경별 settings 로 이동
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# security repo 에 있음
# AWS_ACCESS_KEY_ID = ""
# AWS_SECRET_ACCESS_KEY = ""

AWS_REGION = "ap-northeast-2"
AWS_S3_HOST = "s3.{region}.amazonaws.com".format(region=AWS_REGION)
AWS_STORAGE_BUCKET_NAME = "deephigh"
AWS_QUERYSTRING_AUTH = False
AWS_S3_CUSTOM_DOMAIN = "s.deephigh.net"
AWS_DEFAULT_ACL = "bucket-owner-full-control"

# Email by AWS SES

# security repo 에 있음
# EMAIL_HOST_USER = ""
# EMAIL_HOST_PASSWORD = ""

EMAIL_HOST = "email-smtp.us-east-1.amazonaws.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 1572864000

# Session
SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_AGE = 25 * 60 * 60
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
USER_SESSION_KEY = "U"
ACTOR_SESSION_KEY = "A"
